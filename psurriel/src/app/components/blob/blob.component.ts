import { Component, Input, OnInit } from '@angular/core';
import { repeat } from 'rxjs';

@Component({
  selector: 'app-blob',
  templateUrl: './blob.component.html',
  styleUrls: ['./blob.component.scss']
})
export class BlobComponent implements OnInit {

  @Input() index : number = 0 
  @Input() opacity : string = "1" 
  @Input() gradientStart : string = "black" // "rgb(76, 161, 175)" 
  @Input() gradientEnd : string = "black" // "rgb(196, 224, 229)" 


   resolutionSupportsAnimation() : boolean{
    return window.screen.width>550
  }

/**
 * Blob generator: https://passionhacks.com/blob-maker/
 * 
 * REQUIRED COMPLEXITY = 6
 * 
 */
  svgPaths : Array<string>= [
    "M450.5,305Q421,360,378.5,399.5Q336,439,283,413Q230,387,170,399Q110,411,70,363Q30,315,39,253Q48,191,81,142Q114,93,172,101Q230,109,282,87Q334,65,391,94Q448,123,464,186.5Q480,250,450.5,305Z",
    "M388,294Q387,338,350.5,364Q314,390,270,403Q226,416,189,389.5Q152,363,140.5,324.5Q129,286,115,246Q101,206,96,136Q91,66,159,79.5Q227,93,265.5,112.5Q304,132,333.5,155Q363,178,376,214Q389,250,388,294Z",
    "M435.39262,289.78732Q373.3088,329.57465,352.07975,378.74437Q330.85071,427.9141,278.95194,418.79754Q227.05317,409.68098,162.67077,417.40899Q98.28836,425.13699,70.99082,367.67994Q43.69328,310.2229,79.19224,260.21779Q114.6912,210.21268,111.79754,148.63803Q108.90388,87.06339,161.63292,45.272Q214.36197,3.48061,260.23415,65.10738Q306.10634,126.73415,357.19631,137.62271Q408.28628,148.51126,452.88136,199.25563Q497.47644,250,435.39262,289.78732Z",
    "M444,301Q409,352,364,376.5Q319,401,271,419Q223,437,167.5,423Q112,409,112.5,349.5Q113,290,106.5,248Q100,206,133,179.5Q166,153,195,110Q224,67,280.5,63.5Q337,60,375.5,102.5Q414,145,446.5,197.5Q479,250,444,301Z",
    "M404.19181,301.85609Q411.56827,353.71218,371.70481,391.48158Q331.84135,429.25097,275.28045,447.25097Q218.71955,465.25097,166.21586,436.2694Q113.71218,407.28782,115.92436,347.78782Q118.13654,288.28782,85.95384,240.29519Q53.77114,192.30256,97.04422,158.09775Q140.3173,123.89294,183.01474,101.86714Q225.71218,79.84135,276.21955,81.04985Q326.72692,82.25834,378.06827,108.49263Q429.40962,134.72692,413.11249,192.36346Q396.81536,250,404.19181,301.85609Z",
    "M461.24418,306.58958Q425.25879,363.17916,378.09953,394.50995Q330.94028,425.84074,276.50995,434.66158Q222.07963,443.48242,188.43795,401.2734Q154.79628,359.06437,92.02223,336.79098Q29.24819,314.51758,68.2213,261.43795Q107.19442,208.35832,130.26642,173.87823Q153.33842,139.39814,192.21898,128.03749Q231.09953,116.67684,286.71898,82.47014Q342.33842,48.26344,397.36828,84.00233Q452.39814,119.74121,474.81386,184.8706Q497.22958,250,461.24418,306.58958Z",
    "M395,286Q362,322,347.5,377Q333,432,279.5,423Q226,414,180.5,398.5Q135,383,119,338Q103,293,74,241.5Q45,190,66.5,126.5Q88,63,157,74.5Q226,86,282,71.5Q338,57,364.5,108Q391,159,409.5,204.5Q428,250,395,286Z",
    "M430.5,305Q422,360,387,416.5Q352,473,285,474Q218,475,154,455Q90,435,62,374Q34,313,72.5,261Q111,209,133,174.5Q155,140,193,129.5Q231,119,273,113.5Q315,108,362,128Q409,148,424,199Q439,250,430.5,305Z",
    "M397.45677,303.47493Q415.89971,356.94986,364.63227,373.28962Q313.36484,389.62938,271.27435,393.17117Q229.18386,396.71296,190.60174,379.7631Q152.01961,362.81324,119.95275,330.28126Q87.88589,297.74928,66.39971,243.71585Q44.91353,189.68242,90.29798,154.1657Q135.68242,118.64899,180.79942,101.54034Q225.91643,84.43169,263.84957,110.44986Q301.78271,136.46802,358.4415,140.20058Q415.10029,143.93314,397.05706,196.96657Q379.01382,250,397.45677,303.47493Z",
    "M403.05237,291.87954Q380.63338,333.75908,344.28527,355.30622Q307.93715,376.85335,267.96334,388.43715Q227.98953,400.02095,171.30622,403.23045Q114.62291,406.43994,89.69623,355.25139Q64.76955,304.06285,60.94239,248.54714Q57.11522,193.03142,78.36907,134.79574Q99.62291,76.56006,164.8324,94.42144Q230.0419,112.28282,270.06285,115.55237Q310.0838,118.82193,368.09951,127.8743Q426.11522,136.92668,425.79329,193.46334Q425.47137,250,403.05237,291.87954Z",
    "M425.55054,313.27409Q447.37517,376.54819,376.41114,374.2212Q305.44711,371.89422,262.89422,413.60343Q220.34133,455.31264,180.8606,415.33897Q141.37988,375.3653,115.10343,336.2788Q88.82699,297.19229,69.08416,244.24518Q49.34133,191.29807,75.94711,135.42548Q102.55289,79.55289,159.89422,50.24988Q217.23554,20.94688,262.34133,72.95181Q307.44711,124.95675,371.40386,128Q435.3606,131.04325,419.54325,190.52163Q403.72591,250,425.55054,313.27409Z",
    "M416,309.5Q436,369,373,375Q310,381,269,391Q228,401,180,393.5Q132,386,79.5,350.5Q27,315,29.5,250.5Q32,186,72.5,139Q113,92,171.5,102.5Q230,113,279,96Q328,79,374,110Q420,141,408,195.5Q396,250,416,309.5Z",
    "M437.5,309Q434,368,392.5,419.5Q351,471,286.5,459.5Q222,448,175,419.5Q128,391,117,341.5Q106,292,66.5,238Q27,184,58,124.5Q89,65,159,83Q229,101,268,113Q307,125,364,132.5Q421,140,431,195Q441,250,437.5,309Z",
    "M454.22335,305.45262Q421.83756,360.90524,382.36463,407.33756Q342.89171,453.76988,287.00677,418.45177Q231.12183,383.13366,173.98646,393.14805Q116.8511,403.16244,110.91878,348.08799Q104.98646,293.01354,109.5753,251.68274Q114.16414,210.35195,112.22421,149.83841Q110.28427,89.32488,170.65567,104.28427Q231.02707,119.24366,283.70982,90.19543Q336.39256,61.1472,381.73689,98.54653Q427.08122,135.94585,456.84518,192.97293Q486.60915,250,454.22335,305.45262Z",
    "M429.80682,288.5133Q370.52514,327.02659,344.92335,364.77587Q319.32157,402.52514,268.46905,437.0162Q217.61654,471.50726,192.53095,408.42771Q167.44536,345.34816,125.41296,322.26257Q83.38056,299.17698,97.16078,254.07374Q110.94101,208.9705,102.23453,139.20503Q93.52805,69.43955,160.71978,83.92481Q227.91151,98.41006,275.77877,93.58849Q323.64603,88.76693,338.77587,136.0619Q353.9057,183.35687,421.4971,216.67843Q489.08849,250,429.80682,288.5133Z",
    "M430.5,308.5Q432,367,373.5,379.5Q315,392,267.5,423.5Q220,455,160.5,438.5Q101,422,85,362.5Q69,303,80.5,253.5Q92,204,118.5,166.5Q145,129,180,66Q215,3,274.5,34.5Q334,66,347.5,122.5Q361,179,395,214.5Q429,250,430.5,308.5Z",
    "M444,301Q409,352,364,376.5Q319,401,271,419Q223,437,167.5,423Q112,409,112.5,349.5Q113,290,106.5,248Q100,206,133,179.5Q166,153,195,110Q224,67,280.5,63.5Q337,60,375.5,102.5Q414,145,446.5,197.5Q479,250,444,301Z",
    "M427.34167,297.87656Q398.58855,345.75313,371.28802,400.96692Q343.98749,456.18071,280.37031,470.5367Q216.75313,484.89269,183.11718,425.60286Q149.48124,366.31304,79.18335,343.7737Q8.88545,321.23436,48.71643,262.05546Q88.5474,202.87656,123.62969,173.7737Q158.71198,144.67084,188.23255,86.57423Q217.75313,28.47762,275.29427,48.40339Q332.83542,68.32916,396.84348,91.56797Q460.85155,114.80678,458.47317,182.40339Q456.0948,250,427.34167,297.87656Z",
    "M456.09132,310.73473Q438.7024,371.46947,390.1021,411.23653Q341.5018,451.00359,282.99641,440.78323Q224.49102,430.56286,170.88892,416.88533Q117.28682,403.20779,92.48563,353.36377Q67.68444,303.51976,93.69881,257.75449Q119.71318,211.98922,131.11647,168.75629Q142.51976,125.52335,182.13263,89.37275Q221.74551,53.22216,282.99102,47.87635Q344.23653,42.53053,369.40688,99.86557Q394.57723,157.20061,434.02874,203.6003Q473.48024,250,456.09132,310.73473Z",
  ] 

  public svgPathValues : string = ""
  public duration:number = 0 


  constructor() { }

  public getRanfomBlobSVGPath() : string {

    let selectIndex = ()=> Math.floor(
      Math.random() * this.svgPaths.length
    ) 
    
    let beginIndex = selectIndex()
    let begin = this.svgPaths[selectIndex()]

    let middleIndex : number
    do{
      middleIndex = selectIndex()
    }while(middleIndex == beginIndex)
    

    return  begin + ";" + this.svgPaths[middleIndex]+";" + begin

  }


  ngOnInit() {
    this.svgPathValues = this.getRanfomBlobSVGPath()
    this.duration = 10 +Math.random()* 10

  }

}
